type Skin {
    id: ID!
    name: String!
    description: String!
    author: User!
    type: SkinType!
    status: SkinStatus!
    priceIcp: Float!
    downloads: Int!
    rating: Float!
    config: JSON!
    previewUrl: String!
    createdAt: DateTime!
    updatedAt: DateTime!
}

enum SkinType {
    THEME
    ANIMATION
    SOUND
    CUSTOM
}

enum SkinStatus {
    DRAFT
    PENDING
    APPROVED
    REJECTED
    FEATURED
}

type SkinCollection {
    id: ID!
    name: String!
    description: String!
    curator: User!
    isFeatured: Boolean!
    skins: [Skin!]!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type SkinPurchase {
    id: ID!
    skin: Skin!
    buyer: User!
    transactionId: String!
    amountIcp: Float!
    createdAt: DateTime!
}

type SkinRating {
    id: ID!
    skin: Skin!
    rater: User!
    rating: Int!
    comment: String
    createdAt: DateTime!
    updatedAt: DateTime!
}

input CreateSkinInput {
    name: String!
    description: String!
    type: SkinType!
    priceIcp: Float!
    config: JSON!
    previewUrl: String!
}

input UpdateSkinInput {
    name: String
    description: String
    type: SkinType
    priceIcp: Float
    config: JSON
    previewUrl: String
    status: SkinStatus
}

input CreateCollectionInput {
    name: String!
    description: String!
}

input AddSkinToCollectionInput {
    collectionId: ID!
    skinId: ID!
    position: Int!
}

type Query {
    skin(id: ID!): Skin
    skins(
        type: SkinType
        status: SkinStatus
        authorId: ID
        limit: Int
        offset: Int
    ): [Skin!]!
    skinCollection(id: ID!): SkinCollection
    skinCollections(
        curatorId: ID
        isFeatured: Boolean
        limit: Int
        offset: Int
    ): [SkinCollection!]!
    myPurchases(limit: Int, offset: Int): [SkinPurchase!]!
    myRatings(limit: Int, offset: Int): [SkinRating!]!
}

type Mutation {
    createSkin(input: CreateSkinInput!): Skin!
    updateSkin(id: ID!, input: UpdateSkinInput!): Skin!
    purchaseSkin(id: ID!): SkinPurchase!
    rateSkin(id: ID!, rating: Int!, comment: String): SkinRating!
    createCollection(input: CreateCollectionInput!): SkinCollection!
    addSkinToCollection(input: AddSkinToCollectionInput!): SkinCollection!
    removeSkinFromCollection(collectionId: ID!, skinId: ID!): SkinCollection!
}

scalar DateTime
scalar JSON 