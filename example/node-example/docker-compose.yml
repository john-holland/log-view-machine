version: '3.8'

services:
  # Node.js Backend
  fish-burger-node-backend:
    build: .
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - OTEL_EXPORTER_OTLP_ENDPYPOINT=http://otel-collector:4318/v1/traces
      - UNLEASH_URL=http://unleash:4242/api
      - UNLEASH_CLIENT_KEY=default:development.unleash-insecure-api-token
      - LOG_LEVEL=info
      - LOG_DIR=/app/logs
      - LOG_WAREHOUSE_DIR=/app/log-warehouse
    volumes:
      - ./logs:/app/logs
      - ./log-warehouse:/app/log-warehouse
      - ./src:/app/src
    depends_on:
      - otel-collector
      - unleash
    networks:
      - fish-burger-network

  # Tome Server (SSR)
  tome-server:
    build: .
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - OTEL_EXPORTER_OTLP_ENDPYPOINT=http://otel-collector:4318/v1/traces
      - LOG_LEVEL=info
      - LOG_DIR=/app/logs
      - LOG_WAREHOUSE_DIR=/app/log-warehouse
    volumes:
      - ./logs:/app/logs
      - ./log-warehouse:/app/log-warehouse
      - ./src:/app/src
    command: ["node", "src/tome-server.js"]
    depends_on:
      - otel-collector
    networks:
      - fish-burger-network

  # Kotlin Backend (placeholder)
  fish-burger-kotlin-backend:
    image: openjdk:17-jdk-slim
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=development
      - OTEL_EXPORTER_OTLP_ENDPYPOINT=http://otel-collector:4318/v1/traces
      - LOG_LEVEL=info
      - LOG_DIR=/app/logs
      - LOG_WAREHOUSE_DIR=/app/log-warehouse
    volumes:
      - ./logs:/app/logs
      - ./log-warehouse:/app/log-warehouse
    networks:
      - fish-burger-network

  # Generic Editor Server
  generic-editor:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=info
      - LOG_DIR=/app/logs
      - LOG_WAREHOUSE_DIR=/app/log-warehouse
    volumes:
      - ./logs:/app/logs
      - ./log-warehouse:/app/log-warehouse
      - ./src:/app/src
    command: ["node", "src/component-middleware/generic-editor/server.js"]
    networks:
      - fish-burger-network

  # Log Management Service
  log-manager:
    image: alpine:latest
    volumes:
      - ./logs:/logs
      - ./log-warehouse:/warehouse
      - log_rotation:/var/log/rotation
    command: >
      sh -c "
        apk add --no-cache findutils;
        while true; do
          echo '$(date): Checking for large log files...';
          find /logs -name '*.log' -size +100M -exec echo 'Large file found: {}' \;
          find /warehouse -name '*.log' -size +500M -exec echo 'Large warehouse file found: {}' \;
          sleep 3600;
        done
      "
    networks:
      - fish-burger-network

  # Log Aggregator (Fluentd)
  fluentd:
    image: fluent/fluentd:v1.16-1
    volumes:
      - ./logs:/logs
      - ./log-warehouse:/warehouse
      - ./fluentd.conf:/fluentd/etc/fluent.conf
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - fish-burger-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:latest
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "55679:55679" # zpages
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
      - ./logs:/logs
    command: ["--config", "/etc/otel-collector-config.yaml"]
    networks:
      - fish-burger-network

  # Unleash Feature Toggle
  unleash:
    image: unleashorg/unleash-server:latest
    ports:
      - "4242:4242"
    environment:
      - DATABASE_URL=postgres://unleash:unleash@postgres:5432/unleash
      - DATABASE_URL_FILE=/tmp/database_url
      - REDIS_URL=redis://redis:6379
      - REDIS_URL_FILE=/tmp/redis_url
      - NODE_ENV=development
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
    networks:
      - fish-burger-network

  # PostgreSQL for Unleash
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=unleash
      - POSTGRES_PASSWORD=unleash
      - POSTGRES_DB=unleash
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fish-burger-network

  # Redis for Unleash
  redis:
    image: redis:7-alpine
    networks:
      - fish-burger-network

  # DataDog Agent
  datadog-agent:
    image: datadog/agent:latest
    environment:
      - DD_API_KEY=${DD_API_KEY:-your-datadog-api-key}
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_CONTAINER_EXCLUDE="name:datadog-agent"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./logs:/logs
    networks:
      - fish-burger-network

  # Jaeger for local tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - fish-burger-network

volumes:
  postgres_data:
  log_rotation:

networks:
  fish-burger-network:
    driver: bridge 