type Query {
    stateMachine(name: String!): StateMachine
    stateMachines: [StateMachine!]!
}

type Mutation {
    sendMessage(address: String!, data: JSON!): Message!
    updateState(name: String!, state: StateInput!): StateMachine!
}

type Subscription {
    stateMachineUpdates(name: String!): StateMachineUpdate!
    messageUpdates(address: String!): MessageUpdate!
}

type StateMachineUpdate {
    type: UpdateType!
    stateMachine: StateMachine!
    timestamp: DateTime!
}

type MessageUpdate {
    type: UpdateType!
    message: Message!
    timestamp: DateTime!
}

enum UpdateType {
    STATE_CHANGED
    MESSAGE_RECEIVED
    MESSAGE_PROCESSED
    ERROR_OCCURRED
}

type StateMachine {
    name: String!
    superMachine: String
    subMachines: [StateMachine!]!
    location: String!
    currentState: Transition
    processing: Boolean!
    currentModel: JSON
    log: [ResolvedMessage!]!
}

type Transition {
    from: State!
    to: State!
    send: DateTime!
    received: DateTime
}

type Message {
    id: ID!
    csrfToken: String!
    requestToken: String!
    requestId: String!
    salt: String!
    hash: String!
    data: JSON!
    from: State!
    to: State!
    send: DateTime!
    received: DateTime
}

type State {
    name: String!
    message: String
}

type StateResolution {
    success: Boolean!
    message: String
    timestamp: DateTime!
}

type ResolvedMessage {
    message: Message!
    resolution: StateResolution!
    asynchronousMessages: [ResolvedMessage!]!
}

input StateInput {
    name: String!
    message: String
}

scalar DateTime
scalar JSON 