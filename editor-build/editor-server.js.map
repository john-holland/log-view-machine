{"version":3,"file":"editor-server.js","sources":["../src/core/Tracing.ts","../src/core/RobotCopy.ts","../src/editor-server.ts"],"sourcesContent":["export interface MessageMetadata {\n  messageId: string;\n  traceId: string;\n  spanId: string;\n  timestamp: string;\n  backend: 'kotlin' | 'node';\n  action: string;\n  data?: any;\n}\n\nexport interface TraceInfo {\n  traceId: string;\n  messages: MessageMetadata[];\n  startTime?: string;\n  endTime?: string;\n  backend?: 'kotlin' | 'node';\n}\n\nexport class Tracing {\n  private messageHistory: Map<string, MessageMetadata> = new Map();\n  private traceMap: Map<string, string[]> = new Map();\n\n  generateMessageId(): string {\n    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  generateTraceId(): string {\n    return `trace_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  generateSpanId(): string {\n    return `span_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  trackMessage(messageId: string, traceId: string, spanId: string, metadata: Partial<MessageMetadata>): MessageMetadata {\n    const message: MessageMetadata = {\n      messageId,\n      traceId,\n      spanId,\n      timestamp: new Date().toISOString(),\n      backend: metadata.backend || 'node',\n      action: metadata.action || 'unknown',\n      data: metadata.data,\n    };\n\n    this.messageHistory.set(messageId, message);\n\n    if (!this.traceMap.has(traceId)) {\n      this.traceMap.set(traceId, []);\n    }\n    this.traceMap.get(traceId)!.push(messageId);\n\n    return message;\n  }\n\n  getMessage(messageId: string): MessageMetadata | undefined {\n    return this.messageHistory.get(messageId);\n  }\n\n  getTraceMessages(traceId: string): MessageMetadata[] {\n    const messageIds = this.traceMap.get(traceId) || [];\n    return messageIds.map(id => this.messageHistory.get(id)).filter(Boolean) as MessageMetadata[];\n  }\n\n  getFullTrace(traceId: string): TraceInfo {\n    const messages = this.getTraceMessages(traceId);\n    return {\n      traceId,\n      messages,\n      startTime: messages[0]?.timestamp,\n      endTime: messages[messages.length - 1]?.timestamp,\n      backend: messages[0]?.backend,\n    };\n  }\n\n  getMessageHistory(): MessageMetadata[] {\n    return Array.from(this.messageHistory.values());\n  }\n\n  getTraceIds(): string[] {\n    return Array.from(this.traceMap.keys());\n  }\n\n  clearHistory(): void {\n    this.messageHistory.clear();\n    this.traceMap.clear();\n  }\n\n  // Create tracing headers for HTTP requests\n  createTracingHeaders(traceId: string, spanId: string, messageId: string, enableDataDog: boolean = false): Record<string, string> {\n    const headers: Record<string, string> = {\n      'x-trace-id': traceId,\n      'x-span-id': spanId,\n      'x-message-id': messageId,\n    };\n\n    if (enableDataDog) {\n      headers['x-datadog-trace-id'] = traceId;\n      headers['x-datadog-parent-id'] = spanId;\n      headers['x-datadog-sampling-priority'] = '1';\n    }\n\n    return headers;\n  }\n}\n\nexport function createTracing(): Tracing {\n  return new Tracing();\n} ","// ViewStateMachine import removed as it's not used\nimport { Tracing, createTracing, MessageMetadata } from './Tracing';\n\nexport interface RobotCopyConfig {\n  unleashUrl?: string;\n  unleashClientKey?: string;\n  unleashAppName?: string;\n  unleashEnvironment?: string;\n  kotlinBackendUrl?: string;\n  nodeBackendUrl?: string;\n  enableTracing?: boolean;\n  enableDataDog?: boolean;\n}\n\nexport class RobotCopy {\n  private config: RobotCopyConfig;\n  private tracing: Tracing;\n  private unleashToggles: Map<string, boolean> = new Map();\n  private machines: Map<string, { machine: any; config: any; registeredAt: string }> | undefined;\n\n  constructor(config: RobotCopyConfig = {}) {\n    this.config = {\n      unleashUrl: 'http://localhost:4242/api',\n      unleashClientKey: 'default:development.unleash-insecure-api-token',\n      unleashAppName: 'fish-burger-frontend',\n      unleashEnvironment: 'development',\n      kotlinBackendUrl: 'http://localhost:8080',\n      nodeBackendUrl: 'http://localhost:3001',\n      enableTracing: true,\n      enableDataDog: true,\n      ...config,\n    };\n\n    this.tracing = createTracing();\n    this.initializeUnleashToggles();\n  }\n\n  private async initializeUnleashToggles() {\n    // Simulate Unleash toggle initialization\n    // In real implementation, this would fetch from Unleash API\n    this.unleashToggles.set('fish-burger-kotlin-backend', false);\n    this.unleashToggles.set('fish-burger-node-backend', true);\n    this.unleashToggles.set('enable-tracing', true);\n    this.unleashToggles.set('enable-datadog', true);\n  }\n\n  async isEnabled(toggleName: string, _context: any = {}): Promise<boolean> {\n    return this.unleashToggles.get(toggleName) || false;\n  }\n\n  async getBackendUrl(): Promise<string> {\n    const useKotlin = await this.isEnabled('fish-burger-kotlin-backend');\n    return useKotlin ? this.config.kotlinBackendUrl! : this.config.nodeBackendUrl!;\n  }\n\n  async getBackendType(): Promise<'kotlin' | 'node'> {\n    const useKotlin = await this.isEnabled('fish-burger-kotlin-backend');\n    return useKotlin ? 'kotlin' : 'node';\n  }\n\n  generateMessageId(): string {\n    return this.tracing.generateMessageId();\n  }\n\n  generateTraceId(): string {\n    return this.tracing.generateTraceId();\n  }\n\n  generateSpanId(): string {\n    return this.tracing.generateSpanId();\n  }\n\n  trackMessage(messageId: string, traceId: string, spanId: string, metadata: Partial<MessageMetadata>): MessageMetadata {\n    return this.tracing.trackMessage(messageId, traceId, spanId, metadata);\n  }\n\n  getMessage(messageId: string): MessageMetadata | undefined {\n    return this.tracing.getMessage(messageId);\n  }\n\n  getTraceMessages(traceId: string): MessageMetadata[] {\n    return this.tracing.getTraceMessages(traceId);\n  }\n\n  getFullTrace(traceId: string) {\n    return this.tracing.getFullTrace(traceId);\n  }\n\n  async sendMessage(action: string, data: any = {}): Promise<any> {\n    const messageId = this.generateMessageId();\n    const traceId = this.generateTraceId();\n    const spanId = this.generateSpanId();\n    const backend = await this.getBackendType();\n    const backendUrl = await this.getBackendUrl();\n\n    // Track the message\n    this.trackMessage(messageId, traceId, spanId, {\n      backend,\n      action,\n      data,\n    });\n\n    // Prepare headers for tracing\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      ...this.tracing.createTracingHeaders(traceId, spanId, messageId, await this.isEnabled('enable-datadog')),\n    };\n\n    try {\n      const response = await fetch(`${backendUrl}/api/fish-burger/${action}`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          ...data,\n          messageId,\n          traceId,\n          spanId,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      \n      // Track the response\n      this.trackMessage(\n        `${messageId}_response`,\n        traceId,\n        spanId,\n        {\n          backend,\n          action: `${action}_response`,\n          data: result,\n        }\n      );\n\n      return result;\n    } catch (error) {\n      // Track the error\n      this.trackMessage(\n        `${messageId}_error`,\n        traceId,\n        spanId,\n        {\n          backend,\n          action: `${action}_error`,\n          data: { error: error instanceof Error ? error.message : String(error) },\n        }\n      );\n\n      throw error;\n    }\n  }\n\n  async startCooking(orderId: string, ingredients: string[]): Promise<any> {\n    return this.sendMessage('start', { orderId, ingredients });\n  }\n\n  async updateProgress(orderId: string, cookingTime: number, temperature: number): Promise<any> {\n    return this.sendMessage('progress', { orderId, cookingTime, temperature });\n  }\n\n  async completeCooking(orderId: string): Promise<any> {\n    return this.sendMessage('complete', { orderId });\n  }\n\n  // Integration with ViewStateMachine\n  integrateWithViewStateMachine(viewStateMachine: any): RobotCopy {\n    // Register message handlers for ViewStateMachine\n    viewStateMachine.registerRobotCopyHandler('START_COOKING', async (message: any) => {\n      return this.startCooking(message.orderId, message.ingredients);\n    });\n\n    viewStateMachine.registerRobotCopyHandler('UPDATE_PROGRESS', async (message: any) => {\n      return this.updateProgress(message.orderId, message.cookingTime, message.temperature);\n    });\n\n    viewStateMachine.registerRobotCopyHandler('COMPLETE_COOKING', async (message: any) => {\n      return this.completeCooking(message.orderId);\n    });\n\n    return this;\n  }\n\n  async getTrace(traceId: string): Promise<any> {\n    const backendUrl = await this.getBackendUrl();\n\n    try {\n      const response = await fetch(`${backendUrl}/api/trace/${traceId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Failed to get trace ${traceId}:`, error);\n      return this.getFullTrace(traceId);\n    }\n  }\n\n  async getMessageFromBackend(messageId: string): Promise<any> {\n    const backendUrl = await this.getBackendUrl();\n\n    try {\n      const response = await fetch(`${backendUrl}/api/message/${messageId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Failed to get message ${messageId}:`, error);\n      return this.getMessage(messageId);\n    }\n  }\n\n\n\n  // Debugging and monitoring methods\n  getMessageHistory(): MessageMetadata[] {\n    return this.tracing.getMessageHistory();\n  }\n\n  getTraceIds(): string[] {\n    return this.tracing.getTraceIds();\n  }\n\n  clearHistory(): void {\n    this.tracing.clearHistory();\n  }\n\n  // Configuration methods\n  updateConfig(newConfig: Partial<RobotCopyConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n\n  getConfig(): RobotCopyConfig {\n    return { ...this.config };\n  }\n\n  // Response handling\n  onResponse(channel: string, _handler: (response: any) => void): void {\n    // This would be implemented to handle incoming responses\n    // For now, we'll just store the handler for future use\n    console.log(`Registered response handler for channel: ${channel}`);\n  }\n\n  // Machine registration for state machines\n  registerMachine(name: string, machine: any, config: any = {}): void {\n    console.log(`Registering machine: ${name}`, { config });\n    // Store the machine registration for future use\n    // This could be used for machine discovery, monitoring, etc.\n    if (!this.machines) {\n      this.machines = new Map();\n    }\n    this.machines.set(name, { machine, config, registeredAt: new Date().toISOString() });\n  }\n\n  // Get registered machines\n  getRegisteredMachines(): Map<string, any> {\n    return this.machines || new Map();\n  }\n\n  // Get a specific registered machine\n  getRegisteredMachine(name: string): any {\n    return this.machines?.get(name);\n  }\n}\n\nexport function createRobotCopy(config?: RobotCopyConfig): RobotCopy {\n  return new RobotCopy(config);\n} ","import express from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport { RobotCopy } from './core/RobotCopy';\n\n// Editor-specific configuration\nconst EDITOR_CONFIG = {\n  port: process.env.EDITOR_PORT || 3003,\n  enableCors: true,\n  enableSecurity: true\n};\n\n// Initialize RobotCopy with editor-specific features\nconst robotCopy = new RobotCopy({\n  unleashUrl: process.env.UNLEASH_URL || 'http://localhost:4242/api',\n  unleashAppName: process.env.UNLEASH_APP_NAME || 'tome-connector-editor',\n  unleashEnvironment: process.env.UNLEASH_ENVIRONMENT || 'development'\n});\n\n// Create Express app\nconst app = express();\n\n// Security middleware\nif (EDITOR_CONFIG.enableSecurity) {\n  app.use(helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n        scriptSrc: [\"'self'\", \"'unsafe-eval'\", \"'unsafe-inline'\"],\n        imgSrc: [\"'self'\", \"data:\", \"https:\"],\n        connectSrc: [\"'self'\", \"ws:\", \"wss:\"]\n      }\n    }\n  }));\n}\n\n// CORS middleware\nif (EDITOR_CONFIG.enableCors) {\n  app.use(cors({\n    origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000', 'http://localhost:3001'],\n    credentials: true,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']\n  }));\n}\n\n// Body parsing middleware\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    service: 'tome-connector-editor',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    version: process.env.npm_package_version || '1.0.0'\n  });\n});\n\n// Editor-specific API endpoints\napp.get('/api/editor/status', (req, res) => {\n  res.json({\n    status: 'ready',\n    service: 'tome-connector-editor',\n    robotCopy: {\n      unleashUrl: robotCopy['config'].unleashUrl,\n      unleashAppName: robotCopy['config'].unleashAppName,\n      unleashEnvironment: robotCopy['config'].unleashEnvironment\n    }\n  });\n});\n\n// Pact-related endpoints (using actual RobotCopy methods)\napp.get('/api/pact/features', async (req, res) => {\n  try {\n    // Get available feature toggles\n    const features = {\n      'fish-burger-kotlin-backend': await robotCopy.isEnabled('fish-burger-kotlin-backend'),\n      'fish-burger-node-backend': await robotCopy.isEnabled('fish-burger-node-backend'),\n      'enable-tracing': await robotCopy.isEnabled('enable-tracing'),\n      'enable-datadog': await robotCopy.isEnabled('enable-datadog')\n    };\n    \n    res.json({ features });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to retrieve feature toggles' });\n  }\n});\n\napp.get('/api/pact/backend', async (req, res) => {\n  try {\n    const backendType = await robotCopy.getBackendType();\n    const backendUrl = await robotCopy.getBackendUrl();\n    \n    res.json({ \n      backendType, \n      backendUrl,\n      features: {\n        'fish-burger-kotlin-backend': await robotCopy.isEnabled('fish-burger-kotlin-backend'),\n        'fish-burger-node-backend': await robotCopy.isEnabled('fish-burger-node-backend')\n      }\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to retrieve backend information' });\n  }\n});\n\n// Tracing endpoints\napp.get('/api/tracing/status', (req, res) => {\n  res.json({\n    tracing: {\n      enabled: robotCopy['config'].enableTracing,\n      datadog: robotCopy['config'].enableDataDog\n    }\n  });\n});\n\napp.post('/api/tracing/message', async (req, res) => {\n  try {\n    const { action, data } = req.body;\n    \n    if (!action) {\n      return res.status(400).json({ error: 'action parameter is required' });\n    }\n    \n    const result = await robotCopy.sendMessage(action, data);\n    res.json({ success: true, result });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to send message' });\n  }\n});\n\napp.get('/api/tracing/message/:messageId', (req, res) => {\n  try {\n    const { messageId } = req.params;\n    const message = robotCopy.getMessage(messageId);\n    \n    if (message) {\n      res.json({ message });\n    } else {\n      res.status(404).json({ error: 'Message not found' });\n    }\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to retrieve message' });\n  }\n});\n\napp.get('/api/tracing/trace/:traceId', (req, res) => {\n  try {\n    const { traceId } = req.params;\n    const messages = robotCopy.getTraceMessages(traceId);\n    const fullTrace = robotCopy.getFullTrace(traceId);\n    \n    res.json({ \n      traceId, \n      messageCount: messages.length,\n      messages,\n      fullTrace\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to retrieve trace' });\n  }\n});\n\n// Generate new IDs\napp.get('/api/tracing/generate', (req, res) => {\n  try {\n    const messageId = robotCopy.generateMessageId();\n    const traceId = robotCopy.generateTraceId();\n    const spanId = robotCopy.generateSpanId();\n    \n    res.json({ messageId, traceId, spanId });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to generate IDs' });\n  }\n});\n\n// Main studio interface\napp.get('/', (req, res) => {\n  res.send(`\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Tome Connector Studio</title>\n        <style>\n            body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; background: #f5f5f5; }\n            .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }\n            h1 { color: #2563eb; margin-bottom: 20px; }\n            .nav { margin: 30px 0; }\n            .nav a { display: inline-block; margin: 10px 20px 10px 0; padding: 12px 24px; background: #2563eb; color: white; text-decoration: none; border-radius: 8px; transition: background 0.2s; }\n            .nav a:hover { background: #1d4ed8; }\n            .endpoint { background: #f8fafc; padding: 15px; margin: 10px 0; border-radius: 8px; border-left: 4px solid #2563eb; }\n            .endpoint h3 { margin: 0 0 10px 0; color: #1e293b; }\n            .endpoint p { margin: 5px 0; color: #64748b; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <h1>🌊 Tome Connector Studio</h1>\n            <p>A powerful studio for building and managing Tome Connector components, state machines, and integrations.</p>\n            \n            <div class=\"nav\">\n                <a href=\"/wave-reader\">🎨 Wave Reader Editor</a>\n                <a href=\"/health\">📊 Health Check</a>\n                <a href=\"/api/editor/status\">🎛️ Editor Status</a>\n            </div>\n            \n            <h2>Available Endpoints</h2>\n            <div class=\"endpoint\">\n                <h3>🎨 Wave Reader Editor</h3>\n                <p><strong>GET /wave-reader</strong> - Main editor interface for Wave Reader components</p>\n            </div>\n            <div class=\"endpoint\">\n                <h3>📊 Health & Status</h3>\n                <p><strong>GET /health</strong> - Server health check</p>\n                <p><strong>GET /api/editor/status</strong> - Editor status and configuration</p>\n            </div>\n            <div class=\"endpoint\">\n                <h3>⚙️ Pact Features</h3>\n                <p><strong>GET /api/pact/features</strong> - Available Pact features</p>\n                <p><strong>GET /api/pact/backend</strong> - Pact backend status</p>\n            </div>\n            <div class=\"endpoint\">\n                <h3>🔍 Tracing & Monitoring</h3>\n                <p><strong>GET /api/tracing/status</strong> - Tracing system status</p>\n                <p><strong>POST /api/tracing/message</strong> - Send tracing message</p>\n                <p><strong>GET /api/tracing/message/:messageId</strong> - Get specific message</p>\n                <p><strong>GET /api/tracing/trace/:traceId</strong> - Get trace details</p>\n                <p><strong>GET /api/tracing/generate</strong> - Generate new IDs</p>\n            </div>\n        </div>\n    </body>\n    </html>\n  `);\n});\n\n// Wave Reader Editor Interface\napp.get('/wave-reader', (req, res) => {\n  const workingDir = process.env.WORKING_DIRECTORY || 'Current Directory';\n  \n  res.send(`\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Wave Reader Editor - Tome Connector Studio</title>\n        <style>\n            body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; background: #f8fafc; }\n            .header { background: white; padding: 20px; border-bottom: 1px solid #e2e8f0; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }\n            .header h1 { margin: 0; color: #2563eb; }\n            .header p { margin: 5px 0 0 0; color: #64748b; }\n            .container { max-width: 1200px; margin: 0 auto; padding: 20px; }\n            .nav { margin: 20px 0; }\n            .nav a { display: inline-block; margin: 0 15px 15px 0; padding: 10px 20px; background: #2563eb; color: white; text-decoration: none; border-radius: 6px; transition: background 0.2s; }\n            .nav a:hover { background: #1d4ed8; }\n            .content { background: white; padding: 30px; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }\n            .project-info { background: #f1f5f9; padding: 20px; border-radius: 8px; margin-bottom: 30px; }\n            .project-info h3 { margin: 0 0 15px 0; color: #1e293b; }\n            .project-info p { margin: 5px 0; color: #475569; }\n            .editor-section { margin: 30px 0; }\n            .editor-section h3 { color: #1e293b; border-bottom: 2px solid #e2e8f0; padding-bottom: 10px; }\n            .component-list { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; margin-top: 20px; }\n            .component-card { background: #f8fafc; padding: 20px; border-radius: 8px; border: 1px solid #e2e8f0; cursor: pointer; transition: all 0.2s; position: relative; }\n            .component-card:hover { background: #f1f5f9; border-color: #2563eb; transform: translateY(-2px); box-shadow: 0 4px 12px rgba(37, 99, 235, 0.15); }\n            .component-card.clicked { background: #dbeafe; border-color: #2563eb; }\n            .component-card h4 { margin: 0 0 10px 0; color: #1e293b; }\n            .component-card p { margin: 5px 0; color: #64748b; font-size: 14px; }\n            .status { display: inline-block; padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 500; }\n            .status.active { background: #dcfce7; color: #166534; }\n            .status.inactive { background: #fef2f2; color: #991b1b; }\n            .component-actions { margin-top: 15px; display: flex; gap: 10px; }\n            .btn { padding: 8px 16px; border: none; border-radius: 6px; cursor: pointer; font-size: 12px; font-weight: 500; transition: all 0.2s; }\n            .btn-primary { background: #2563eb; color: white; }\n            .btn-primary:hover { background: #1d4ed8; }\n            .btn-secondary { background: #64748b; color: white; }\n            .btn-secondary:hover { background: #475569; }\n            .btn-success { background: #059669; color: white; }\n            .btn-success:hover { background: #047857; }\n            .component-editor { background: white; border: 2px solid #e2e8f0; border-radius: 12px; margin-top: 30px; padding: 30px; display: none; }\n            .component-editor.active { display: block; }\n            .editor-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; padding-bottom: 15px; border-bottom: 2px solid #e2e8f0; }\n            .editor-header h3 { margin: 0; color: #1e293b; }\n            .close-btn { background: #ef4444; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 14px; }\n            .close-btn:hover { background: #dc2626; }\n            .editor-content { display: grid; grid-template-columns: 1fr 1fr; gap: 30px; }\n            .editor-panel { background: #f8fafc; padding: 20px; border-radius: 8px; border: 1px solid #e2e8f0; }\n            .editor-panel h4 { margin: 0 0 15px 0; color: #1e293b; }\n            .code-editor { background: #1e293b; color: #e2e8f0; padding: 15px; border-radius: 6px; font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace; font-size: 13px; line-height: 1.5; min-height: 200px; white-space: pre-wrap; }\n            .file-tree { background: #f1f5f9; padding: 15px; border-radius: 6px; border: 1px solid #e2e8f0; }\n            .file-item { padding: 8px 12px; margin: 4px 0; border-radius: 4px; cursor: pointer; transition: background 0.2s; }\n            .file-item:hover { background: #e2e8f0; }\n            .file-item.active { background: #dbeafe; color: #1e40af; }\n            .loading { display: none; text-align: center; padding: 40px; color: #64748b; }\n            .loading.active { display: block; }\n            .spinner { border: 3px solid #f3f3f3; border-top: 3px solid #2563eb; border-radius: 50%; width: 30px; height: 30px; animation: spin 1s linear infinite; margin: 0 auto 20px; }\n            @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }\n        </style>\n    </head>\n    <body>\n        <div class=\"header\">\n            <div class=\"container\">\n                <h1>🎨 Wave Reader Editor</h1>\n                <p>Tome Connector Studio - Component Middleware Editor</p>\n            </div>\n        </div>\n        \n        <div class=\"container\">\n            <div class=\"nav\">\n                <a href=\"/\">🏠 Studio Home</a>\n                <a href=\"/health\">📊 Health</a>\n                <a href=\"/api/editor/status\">🎛️ Status</a>\n                <a href=\"/api/pact/features\">⚙️ Pact Features</a>\n            </div>\n            \n            <div class=\"content\">\n                <div class=\"project-info\">\n                    <h3>📁 Project Information</h3>\n                    <p><strong>Working Directory:</strong> ${workingDir}</p>\n                    <p><strong>Studio Version:</strong> 1.2.0</p>\n                    <p><strong>Status:</strong> <span class=\"status active\">Active</span></p>\n                </div>\n                \n                <div class=\"editor-section\">\n                    <h3>🔧 Component Middleware</h3>\n                    <p>Click on any component card to open it in the editor. Manage and configure Wave Reader component middleware components.</p>\n                    \n                    <div class=\"component-list\">\n                        <div class=\"component-card\" data-component=\"error-boundary\">\n                            <h4>🎯 Error Boundary</h4>\n                            <p>Error handling and boundary management for components</p>\n                            <p><strong>Status:</strong> <span class=\"status active\">Available</span></p>\n                            <div class=\"component-actions\">\n                                <button class=\"btn btn-primary\" data-action=\"open-editor\" data-component=\"error-boundary\">Open Editor</button>\n                                <button class=\"btn btn-secondary\" data-action=\"view-files\" data-component=\"error-boundary\">View Files</button>\n                            </div>\n                        </div>\n                        <div class=\"component-card\" data-component=\"go-button\">\n                            <h4>🔘 Go Button</h4>\n                            <p>Navigation and action button components</p>\n                            <p><strong>Status:</strong> <span class=\"status active\">Available</span></p>\n                            <div class=\"component-actions\">\n                                <button class=\"btn btn-primary\" data-action=\"open-editor\" data-component=\"go-button\">Open Editor</button>\n                                <button class=\"btn btn-secondary\" data-action=\"view-files\" data-component=\"go-button\">View Files</button>\n                            </div>\n                        </div>\n                        <div class=\"component-card\" data-component=\"selector-hierarchy\">\n                            <h4>📋 Selector Hierarchy</h4>\n                            <p>Component selection and hierarchy management</p>\n                            <p><strong>Status:</strong> <span class=\"status active\">Available</span></p>\n                            <div class=\"component-actions\">\n                                <button class=\"btn btn-primary\" data-action=\"open-editor\" data-component=\"selector-hierarchy\">Open Editor</button>\n                                <button class=\"btn btn-secondary\" data-action=\"view-files\" data-component=\"selector-hierarchy\">View Files</button>\n                            </div>\n                        </div>\n                        <div class=\"component-card\" data-component=\"settings\">\n                            <h4>⚙️ Settings</h4>\n                            <p>Configuration and settings management</p>\n                            <p><strong>Status:</strong> <span class=\"status active\">Available</span></p>\n                            <div class=\"component-actions\">\n                                <button class=\"btn btn-primary\" data-action=\"open-editor\" data-component=\"settings\">Open Editor</button>\n                                <button class=\"btn btn-secondary\" data-action=\"view-files\" data-component=\"settings\">View Files</button>\n                            </div>\n                        </div>\n                        <div class=\"component-card\" data-component=\"wave-tabs\">\n                            <h4>📊 Wave Tabs</h4>\n                            <p>Tab-based navigation and content management</p>\n                            <p><strong>Status:</strong> <span class=\"status active\">Available</span></p>\n                            <div class=\"component-actions\">\n                                <button class=\"btn btn-primary\" data-action=\"open-editor\" data-component=\"wave-tabs\">Open Editor</button>\n                                <button class=\"btn btn-secondary\" data-action=\"view-files\" data-component=\"wave-tabs\">View Files</button>\n                            </div>\n                        </div>\n                        <div class=\"component-card\" data-component=\"scan-for-input\">\n                            <h4>🔍 Scan for Input</h4>\n                            <p>Input detection and scanning functionality</p>\n                            <p><strong>Status:</strong> <span class=\"status active\">Available</span></p>\n                            <div class=\"component-actions\">\n                                <button class=\"btn btn-primary\" data-action=\"open-editor\" data-component=\"scan-for-input\">Open Editor</button>\n                                <button class=\"btn btn-secondary\" data-action=\"view-files\" data-component=\"scan-for-input\">View Files</button>\n                            </div>\n                        </div>\n                        <div class=\"component-card\" data-component=\"selector-input\">\n                            <h4>⌨️ Selector Input</h4>\n                            <p>Input selection and management tools</p>\n                            <p><strong>Status:</strong> <span class=\"status active\">Available</span></p>\n                            <div class=\"component-actions\">\n                                <button class=\"btn btn-primary\" data-action=\"open-editor\" data-component=\"selector-input\">Open Editor</button>\n                                <button class=\"btn btn-secondary\" data-action=\"view-files\" data-component=\"selector-input\">View Files</button>\n                            </div>\n                        </div>\n                        <div class=\"component-card\" data-component=\"wave-reader\">\n                            <h4>🌊 Wave Reader</h4>\n                            <p>Core Wave Reader functionality and components</p>\n                            <p><strong>Status:</strong> <span class=\"status active\">Available</span></p>\n                            <div class=\"component-actions\">\n                                <button class=\"btn btn-primary\" data-action=\"open-editor\" data-component=\"wave-reader\">Open Editor</button>\n                                <button class=\"btn btn-secondary\" data-action=\"view-files\" data-component=\"wave-reader\">View Files</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Component Editor Panel -->\n                <div class=\"component-editor\" id=\"componentEditor\">\n                    <div class=\"editor-header\">\n                        <h3 id=\"editorTitle\">Component Editor</h3>\n                        <button class=\"close-btn\" id=\"closeEditorBtn\">✕ Close</button>\n                    </div>\n                    <div class=\"editor-content\">\n                        <div class=\"editor-panel\">\n                            <h4>📁 File Structure</h4>\n                            <div class=\"file-tree\" id=\"fileTree\">\n                                <div class=\"file-item active\" data-file=\"component.tsx\">component.tsx</div>\n                                <div class=\"file-item\" data-file=\"index.ts\">index.ts</div>\n                                <div class=\"file-item\" data-file=\"types.ts\">types.ts</div>\n                                <div class=\"file-item\" data-file=\"utils.ts\">utils.ts</div>\n                            </div>\n                        </div>\n                        <div class=\"editor-panel\">\n                            <h4>💻 Code Editor</h4>\n                            <div class=\"code-editor\" id=\"codeEditor\" contenteditable=\"true\">\n// Component code will be loaded here\n// Click on a file in the file tree to view its contents\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class=\"editor-section\">\n                    <h3>🚀 Quick Actions</h3>\n                    <p>Common actions and shortcuts for development.</p>\n                    <div class=\"nav\">\n                        <a href=\"/api/editor/status\">📊 Check Status</a>\n                        <a href=\"/api/pact/features\">⚙️ View Features</a>\n                        <a href=\"/api/tracing/status\">🔍 Tracing Status</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <script>\n            // Component data (in a real app, this would come from the server)\n            const componentData = {\n                'error-boundary': {\n                    name: 'Error Boundary',\n                    description: 'Error handling and boundary management for components',\n                    files: {\n                        'component.tsx': \\`import React from 'react';\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode;\n  fallback?: React.ComponentType<{ error: Error }>;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Error caught by boundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      const FallbackComponent = this.props.fallback;\n      if (FallbackComponent) {\n        return <FallbackComponent error={this.state.error!} />;\n      }\n      return (\n        <div className=\"error-boundary\">\n          <h2>Something went wrong</h2>\n          <p>Please try refreshing the page</p>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\\`,\n                        'index.ts': \\`export { ErrorBoundary } from './component';\\`,\n                        'types.ts': \\`export interface ErrorInfo {\n  componentStack: string;\n}\\`,\n                        'utils.ts': \\`export const logError = (error: Error, errorInfo: any) => {\n  console.error('Error logged:', error, errorInfo);\n};\\`\n                    }\n                },\n                'go-button': {\n                    name: 'Go Button',\n                    description: 'Navigation and action button components',\n                    files: {\n                        'component.tsx': \\`import React from 'react';\n\ninterface GoButtonProps {\n  onClick: () => void;\n  disabled?: boolean;\n  children: React.ReactNode;\n  variant?: 'primary' | 'secondary' | 'success';\n}\n\nexport const GoButton: React.FC<GoButtonProps> = ({\n  onClick,\n  disabled = false,\n  children,\n  variant = 'primary'\n}) => {\n  const baseClasses = 'px-4 py-2 rounded font-medium transition-colors';\n  const variantClasses = {\n    primary: 'bg-blue-500 hover:bg-blue-600 text-white',\n    secondary: 'bg-gray-500 hover:bg-gray-600 text-white',\n    success: 'bg-green-500 hover:bg-green-600 text-white'\n  };\n\n  return (\n    <button\n      className={\\`\\${baseClasses} \\${variantClasses[variant]}\\`}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {children}\n    </button>\n  );\n};\\`,\n                        'index.ts': \\`export { GoButton } from './component';\\`,\n                        'types.ts': \\`export type ButtonVariant = 'primary' | 'secondary' | 'success';\\`,\n                        'utils.ts': \\`export const getButtonClasses = (variant: ButtonVariant) => {\n  // Button styling utilities\n};\\`\n                    }\n                },\n                'selector-hierarchy': {\n                    name: 'Selector Hierarchy',\n                    description: 'Component selection and hierarchy management',\n                    files: {\n                        'component.tsx': \\`import React from 'react';\n\ninterface SelectorNode {\n  id: string;\n  name: string;\n  children?: SelectorNode[];\n  selected?: boolean;\n}\n\ninterface SelectorHierarchyProps {\n  nodes: SelectorNode[];\n  onSelectionChange: (selectedIds: string[]) => void;\n}\n\nexport const SelectorHierarchy: React.FC<SelectorHierarchyProps> = ({\n  nodes,\n  onSelectionChange\n}) => {\n  const [selectedIds, setSelectedIds] = React.useState<string[]>([]);\n\n  const handleToggle = (nodeId: string) => {\n    const newSelection = selectedIds.includes(nodeId)\n      ? selectedIds.filter(id => id !== nodeId)\n      : [...selectedIds, nodeId];\n    \n    setSelectedIds(newSelection);\n    onSelectionChange(newSelection);\n  };\n\n  const renderNode = (node: SelectorNode) => (\n    <div key={node.id} className=\"selector-node\">\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={selectedIds.includes(node.id)}\n          onChange={() => handleToggle(node.id)}\n        />\n        {node.name}\n      </label>\n      {node.children && (\n        <div className=\"selector-children\">\n          {node.children.map(renderNode)}\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"selector-hierarchy\">\n      {nodes.map(renderNode)}\n    </div>\n  );\n};\\`,\n                        'index.ts': \\`export { SelectorHierarchy } from './component';\\`,\n                        'types.ts': \\`export interface SelectorNode {\n  id: string;\n  name: string;\n  children?: SelectorNode[];\n  selected?: boolean;\n}\\`,\n                        'utils.ts': \\`export const flattenNodes = (nodes: SelectorNode[]): SelectorNode[] => {\n  const result: SelectorNode[] = [];\n  const stack = [...nodes];\n  \n  while (stack.length > 0) {\n    const node = stack.pop()!;\n    result.push(node);\n    if (node.children) {\n      stack.push(...node.children);\n    }\n  }\n  \n  return result;\n};\\`\n                    }\n                },\n                'settings': {\n                    name: 'Settings',\n                    description: 'Configuration and settings management',\n                    files: {\n                        'component.tsx': \\`import React from 'react';\n\ninterface Setting {\n  key: string;\n  label: string;\n  type: 'text' | 'number' | 'boolean' | 'select';\n  value: any;\n  options?: string[];\n}\n\ninterface SettingsProps {\n  settings: Setting[];\n  onSettingChange: (key: string, value: any) => void;\n}\n\nexport const Settings: React.FC<SettingsProps> = ({\n  settings,\n  onSettingChange\n}) => {\n  const renderSettingInput = (setting: Setting) => {\n    switch (setting.type) {\n      case 'text':\n        return (\n          <input\n            type=\"text\"\n            value={setting.value}\n            onChange={(e) => onSettingChange(setting.key, e.target.value)}\n            className=\"w-full px-3 py-2 border rounded\"\n          />\n        );\n      case 'number':\n        return (\n          <input\n            type=\"number\"\n            value={setting.value}\n            onChange={(e) => onSettingChange(setting.key, Number(e.target.value))}\n            className=\"w-full px-3 py-2 border rounded\"\n          />\n        );\n      case 'boolean':\n        return (\n          <input\n            type=\"checkbox\"\n            checked={setting.value}\n            onChange={(e) => onSettingChange(setting.key, e.target.checked)}\n            className=\"w-4 h-4\"\n          />\n        );\n      case 'select':\n        return (\n          <select\n            value={setting.value}\n            onChange={(e) => onSettingChange(setting.key, e.target.value)}\n            className=\"w-full px-3 py-2 border rounded\"\n          >\n            {setting.options?.map(option => (\n              <option key={option} value={option}>{option}</option>\n            ))}\n          </select>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"settings\">\n      <h3>Settings</h3>\n      {settings.map(setting => (\n        <div key={setting.key} className=\"setting-item\">\n          <label>{setting.label}</label>\n          {renderSettingInput(setting)}\n        </div>\n      ))}\n    </div>\n  );\n};\\`,\n                        'index.ts': \\`export { Settings } from './component';\\`,\n                        'types.ts': \\`export interface Setting {\n  key: string;\n  label: string;\n  type: 'text' | 'number' | 'boolean' | 'select';\n  value: any;\n  options?: string[];\n}\\`,\n                        'utils.ts': \\`export const validateSetting = (setting: Setting, value: any): boolean => {\n  // Validation logic for different setting types\n  return true;\n};\\`\n                    }\n                },\n                'wave-tabs': {\n                    name: 'Wave Tabs',\n                    description: 'Tab-based navigation and content management',\n                    files: {\n                        'component.tsx': \\`import React from 'react';\n\ninterface Tab {\n  id: string;\n  label: string;\n  content: React.ReactNode;\n  disabled?: boolean;\n}\n\ninterface WaveTabsProps {\n  tabs: Tab[];\n  activeTab?: string;\n  onTabChange: (tabId: string) => void;\n}\n\nexport const WaveTabs: React.FC<WaveTabsProps> = ({\n  tabs,\n  activeTab,\n  onTabChange\n}) => {\n  const [currentTab, setCurrentTab] = React.useState(activeTab || tabs[0]?.id);\n\n  const handleTabClick = (tabId: string) => {\n    if (!tabs.find(tab => tab.id === tabId)?.disabled) {\n      setCurrentTab(tabId);\n      onTabChange(tabId);\n    }\n  };\n\n  const activeTabData = tabs.find(tab => tab.id === currentTab);\n\n  return (\n    <div className=\"wave-tabs\">\n      <div className=\"tab-navigation\">\n        {tabs.map(tab => (\n          <button\n            key={tab.id}\n            className={\\`tab-button \\${currentTab === tab.id ? 'active' : ''} \\${tab.disabled ? 'disabled' : ''}\\`}\n            onClick={() => handleTabClick(tab.id)}\n            disabled={tab.disabled}\n          >\n            {tab.label}\n          </button>\n        ))}\n      </div>\n      <div className=\"tab-content\">\n        {activeTabData?.content}\n      </div>\n    </div>\n  );\n};\\`,\n                        'index.ts': \\`export { WaveTabs } from './component';\\`,\n                        'types.ts': \\`export interface Tab {\n  id: string;\n  label: string;\n  content: React.ReactNode;\n  disabled?: boolean;\n}\\`,\n                        'utils.ts': \\`export const createTab = (id: string, label: string, content: React.ReactNode): Tab => ({\n  id,\n  label,\n  content,\n  disabled: false\n});\\`\n                    }\n                },\n                'scan-for-input': {\n                    name: 'Scan for Input',\n                    description: 'Input detection and scanning functionality',\n                    files: {\n                        'component.tsx': \\`import React from 'react';\n\ninterface ScanResult {\n  id: string;\n  type: 'input' | 'button' | 'link' | 'select';\n  value?: string;\n  placeholder?: string;\n}\n\ninterface ScanForInputProps {\n  onScanComplete: (results: ScanResult[]) => void;\n  autoScan?: boolean;\n}\n\nexport const ScanForInput: React.FC<ScanForInputProps> = ({\n  onScanComplete,\n  autoScan = false\n}) => {\n  const [isScanning, setIsScanning] = React.useState(false);\n  const [scanResults, setScanResults] = React.useState<ScanResult[]>([]);\n\n  const performScan = () => {\n    setIsScanning(true);\n    \n    // Simulate scanning process\n    setTimeout(() => {\n      const mockResults: ScanResult[] = [\n        { id: 'input-1', type: 'input', placeholder: 'Enter text...' },\n        { id: 'button-1', type: 'button', value: 'Submit' },\n        { id: 'link-1', type: 'link', value: 'Click here' }\n      ];\n      \n      setScanResults(mockResults);\n      setIsScanning(false);\n      onScanComplete(mockResults);\n    }, 1000);\n  };\n\n  React.useEffect(() => {\n    if (autoScan) {\n      performScan();\n    }\n  }, [autoScan]);\n\n  return (\n    <div className=\"scan-for-input\">\n      <button\n        onClick={performScan}\n        disabled={isScanning}\n        className=\"scan-button\"\n      >\n        {isScanning ? 'Scanning...' : 'Scan for Inputs'}\n      </button>\n      \n      {scanResults.length > 0 && (\n        <div className=\"scan-results\">\n          <h4>Scan Results:</h4>\n          <ul>\n            {scanResults.map(result => (\n              <li key={result.id}>\n                <strong>{result.type}:</strong> {result.value || result.placeholder}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\\`,\n                        'index.ts': \\`export { ScanForInput } from './component';\\`,\n                        'types.ts': \\`export interface ScanResult {\n  id: string;\n  type: 'input' | 'button' | 'link' | 'select';\n  value?: string;\n  placeholder?: string;\n}\\`,\n                        'utils.ts': \\`export const validateInput = (input: HTMLInputElement): boolean => {\n  return input.offsetWidth > 0 && input.offsetHeight > 0;\n};\\`\n                    }\n                },\n                'selector-input': {\n                    name: 'Selector Input',\n                    description: 'Input selection and management tools',\n                    files: {\n                        'component.tsx': \\`import React from 'react';\n\ninterface SelectorInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  suggestions?: string[];\n}\n\nexport const SelectorInput: React.FC<SelectorInputProps> = ({\n  value,\n  onChange,\n  placeholder = 'Enter selector...',\n  suggestions = []\n}) => {\n  const [showSuggestions, setShowSuggestions] = React.useState(false);\n  const [filteredSuggestions, setFilteredSuggestions] = React.useState(suggestions);\n\n  const handleInputChange = (inputValue: string) => {\n    onChange(inputValue);\n    \n    if (inputValue.length > 0) {\n      const filtered = suggestions.filter(suggestion =>\n        suggestion.toLowerCase().includes(inputValue.toLowerCase())\n      );\n      setFilteredSuggestions(filtered);\n      setShowSuggestions(filtered.length > 0);\n    } else {\n      setShowSuggestions(false);\n    }\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    onChange(suggestion);\n    setShowSuggestions(false);\n  };\n\n  return (\n    <div className=\"selector-input\">\n      <input\n        type=\"text\"\n        value={value}\n        onChange={(e) => handleInputChange(e.target.value)}\n        placeholder={placeholder}\n        className=\"selector-field\"\n        onFocus={() => setShowSuggestions(suggestions.length > 0)}\n      />\n      \n      {showSuggestions && (\n        <div className=\"suggestions-dropdown\">\n          {filteredSuggestions.map(suggestion => (\n            <div\n              key={suggestion}\n              className=\"suggestion-item\"\n              onClick={() => handleSuggestionClick(suggestion)}\n            >\n              {suggestion}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\\`,\n                        'index.ts': \\`export { SelectorInput } from './component';\\`,\n                        'types.ts': \\`export interface SelectorSuggestion {\n  value: string;\n  label: string;\n  category?: string;\n}\\`,\n                        'utils.ts': \\`export const parseSelector = (selector: string) => {\n  // Parse CSS selector into components\n  return {\n    tag: selector.match(/^[a-zA-Z]+/)?.[0],\n    id: selector.match(/#([a-zA-Z0-9_-]+)/)?.[1],\n    classes: selector.match(/\\\\.([a-zA-Z0-9_-]+)/g)?.map(c => c.slice(1)) || []\n  };\n};\\`\n                    }\n                },\n                'wave-reader': {\n                    name: 'Wave Reader',\n                    description: 'Core Wave Reader functionality and components',\n                    files: {\n                        'component.tsx': \\`import React from 'react';\n\ninterface WaveReaderProps {\n  text: string;\n  speed?: number;\n  onComplete?: () => void;\n}\n\nexport const WaveReader: React.FC<WaveReaderProps> = ({\n  text,\n  speed = 200,\n  onComplete\n}) => {\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n  const [isReading, setIsReading] = React.useState(false);\n\n  const startReading = () => {\n    setIsReading(true);\n    setCurrentIndex(0);\n  };\n\n  const stopReading = () => {\n    setIsReading(false);\n  };\n\n  React.useEffect(() => {\n    if (isReading && currentIndex < text.length) {\n      const timer = setTimeout(() => {\n        setCurrentIndex(prev => {\n          const next = prev + 1;\n          if (next >= text.length) {\n            setIsReading(false);\n            onComplete?.();\n          }\n          return next;\n        });\n      }, speed);\n\n      return () => clearTimeout(timer);\n    }\n  }, [isReading, currentIndex, text.length, speed, onComplete]);\n\n  const currentText = text.slice(0, currentIndex + 1);\n  const remainingText = text.slice(currentIndex + 1);\n\n  return (\n    <div className=\"wave-reader\">\n      <div className=\"controls\">\n        <button onClick={startReading} disabled={isReading}>\n          {isReading ? 'Reading...' : 'Start Reading'}\n        </button>\n        <button onClick={stopReading} disabled={!isReading}>\n          Stop\n        </button>\n      </div>\n      \n      <div className=\"text-display\">\n        <span className=\"read-text\">{currentText}</span>\n        <span className=\"remaining-text\">{remainingText}</span>\n      </div>\n      \n      <div className=\"progress\">\n        <div \n          className=\"progress-bar\" \n          style={{ width: \\`\\${((currentIndex + 1) / text.length) * 100}%\\` }}\n        />\n      </div>\n    </div>\n  );\n};\\`,\n                        'index.ts': \\`export { WaveReader } from './component';\\`,\n                        'types.ts': \\`export interface ReadingConfig {\n  speed: number;\n  autoStart: boolean;\n  highlightWords: boolean;\n}\\`,\n                        'utils.ts': \\`export const calculateReadingTime = (text: string, speed: number): number => {\n  const words = text.split(' ').length;\n  const wordsPerMinute = 60000 / speed;\n  return Math.ceil(words / wordsPerMinute);\n};\\`\n                    }\n                }\n            };\n\n            // State variables\n            let currentComponent = null;\n            let currentFile = 'component.tsx';\n\n            // Event handlers\n            function openComponent(componentId) {\n                currentComponent = componentId;\n                const component = componentData[componentId];\n                \n                if (component) {\n                    // Update UI\n                    document.getElementById('editorTitle').textContent = \\`\\${component.name} Editor\\`;\n                    document.getElementById('componentEditor').classList.add('active');\n                    \n                    // Load first file\n                    loadFile('component.tsx');\n                    \n                    // Update component cards\n                    document.querySelectorAll('.component-card').forEach(card => {\n                        card.classList.remove('clicked');\n                    });\n                    document.querySelector(\\`[data-component=\"\\${componentId}\"]\\`).classList.add('clicked');\n                }\n            }\n\n            function closeComponent() {\n                document.getElementById('componentEditor').classList.remove('active');\n                document.querySelectorAll('.component-card').forEach(card => {\n                    card.classList.remove('clicked');\n                });\n                currentComponent = null;\n            }\n\n            function loadFile(filename) {\n                if (!currentComponent) return;\n                \n                currentFile = filename;\n                const component = componentData[currentComponent];\n                const fileContent = component.files[filename];\n                \n                if (fileContent) {\n                    document.getElementById('codeEditor').textContent = fileContent;\n                    \n                    // Update file tree\n                    document.querySelectorAll('.file-item').forEach(item => {\n                        item.classList.remove('active');\n                    });\n                    document.querySelector(\\`[data-file=\"\\${filename}\"]\\`).classList.add('active');\n                }\n            }\n\n            function viewFiles(componentId) {\n                // This could open a file explorer or show file structure\n                alert(\\`Viewing files for \\${componentData[componentId].name}\\`);\n            }\n\n            // Initialize event listeners when DOM is loaded\n            document.addEventListener('DOMContentLoaded', function() {\n                // Button click handlers\n                document.addEventListener('click', function(e) {\n                    const target = e.target;\n                    \n                    if (target.matches('[data-action=\"open-editor\"]')) {\n                        const componentId = target.getAttribute('data-component');\n                        openComponent(componentId);\n                    } else if (target.matches('[data-action=\"view-files\"]')) {\n                        const componentId = target.getAttribute('data-component');\n                        viewFiles(componentId);\n                    }\n                });\n\n                // Close editor button\n                document.getElementById('closeEditorBtn').addEventListener('click', closeComponent);\n\n                // File tree click handlers\n                document.querySelectorAll('.file-item').forEach(item => {\n                    item.addEventListener('click', function() {\n                        const filename = this.getAttribute('data-file');\n                        loadFile(filename);\n                    });\n                });\n\n                console.log('🎨 Wave Reader Editor initialized successfully!');\n            });\n        </script>\n    </body>\n    </html>\n  `);\n});\n\n// Error handling middleware\napp.use((error: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\n  console.error('Editor server error:', error);\n  \n  res.status(500).json({\n    error: 'Internal server error',\n    message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'\n  });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({\n    error: 'Endpoint not found',\n    path: req.originalUrl,\n    availableEndpoints: [\n      'GET /health',\n      'GET /api/editor/status',\n      'GET /api/pact/features',\n      'GET /api/pact/backend',\n      'GET /api/tracing/status',\n      'POST /api/tracing/message',\n      'GET /api/tracing/message/:messageId',\n      'GET /api/tracing/trace/:traceId',\n      'GET /api/tracing/generate'\n    ]\n  });\n});\n\n// Start server\nasync function startServer() {\n  try {\n    // Start listening\n    app.listen(EDITOR_CONFIG.port, () => {\n      console.log(`🚀 TomeConnector Editor Server running on port ${EDITOR_CONFIG.port}`);\n      console.log(`🔍 Health check at http://localhost:${EDITOR_CONFIG.port}/health`);\n      console.log(`🎛️  Editor status at http://localhost:${EDITOR_CONFIG.port}/api/editor/status`);\n      console.log(`⚙️  Pact features at http://localhost:${EDITOR_CONFIG.port}/api/pact/features`);\n      console.log(`🔍 Tracing at http://localhost:${EDITOR_CONFIG.port}/api/tracing/status`);\n    });\n  } catch (error) {\n    console.error('Failed to start editor server:', error);\n    process.exit(1);\n  }\n}\n\n// Export for testing\nexport { app, startServer, robotCopy };\n\n// Start server if this file is run directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  startServer();\n}\n"],"names":[],"mappings":"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"}